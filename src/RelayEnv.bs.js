// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fetch from "bs-fetch/src/Fetch.bs.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.bs.js";
import * as RelayRuntime from "relay-runtime";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var Graphql_error = /* @__PURE__ */Caml_exceptions.create("RelayEnv.Graphql_error");

function fetchQuery(operation, variables, _cacheConfig, _uploadables) {
  return Js_promise.then_((function (resp) {
                if (resp.ok) {
                  return Fetch.$$Response.json(resp);
                } else {
                  return Promise.reject({
                              RE_EXN_ID: Graphql_error,
                              _1: "Request failed: " + resp.statusText
                            });
                }
              }), fetch("https://api.github.com/graphql", Fetch.RequestInit.make(/* Post */2, {
                        authorization: "bearer " + Belt_Option.getWithDefault(Caml_option.nullable_to_opt(process.env.REACT_APP_GITHUB_AUTH_TOKEN), "") + "",
                        "content-type": "application/json",
                        accept: "application/json"
                      }, Caml_option.some(JSON.stringify(Js_dict.fromList({
                                    hd: [
                                      "query",
                                      operation.text
                                    ],
                                    tl: {
                                      hd: [
                                        "variables",
                                        variables
                                      ],
                                      tl: /* [] */0
                                    }
                                  }))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)));
}

var network = RelayRuntime.Network.create(fetchQuery, undefined);

var environment = RescriptRelay.Environment.make(network, RescriptRelay.Store.make(new RelayRuntime.RecordSource(undefined), 10, undefined, undefined), undefined, undefined, undefined, undefined, undefined, undefined);

export {
  Graphql_error ,
  fetchQuery ,
  network ,
  environment ,
}
/* network Not a pure module */
